package com.diquest.openapi;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import com.diquest.openapi.log.LogService;
import com.diquest.openapi.log.LogVO;
//import com.diquest.openapi.log.LogService;
//import com.diquest.openapi.log.LogVO;
import com.diquest.openapi.popkeyword.OpenAPIPopWordResponse;
import com.diquest.openapi.popkeyword.OpenAPIPopWordResponseJson;
import com.diquest.openapi.popkeyword.PopkeywordService;
import com.diquest.openapi.popkeyword.PopkeywordVO;
import com.diquest.openapi.search.OpenAPIResponse;
import com.diquest.openapi.search.SearchService;
import com.diquest.openapi.search.SearchVO;
import com.diquest.openapi.uflixpotal.OpenAPIUflixQuickResponse;
import com.diquest.openapi.uflixpotal.OpenAPIUflixQuickResponseJson;
import com.diquest.openapi.uflixpotal.OpenAPIUflixResponse;
import com.diquest.openapi.uflixpotal.OpenAPIUflixResponseJson;
import com.diquest.openapi.uflixpotal.UflixService;
import com.diquest.openapi.uflixtvg.OpenAPITvgQuickResponse;
import com.diquest.openapi.uflixtvg.OpenAPITvgQuickResponseJson;
import com.diquest.openapi.uflixtvg.OpenAPITvgResponse;
import com.diquest.openapi.uflixtvg.OpenAPITvgResponseJson;
import com.diquest.openapi.uflixtvg.TvgService;
import com.diquest.openapi.util.Json_Error;
import com.diquest.openapi.util.OpenAPIErrorResponse;
import com.diquest.openapi.util.OpenAPIErrorResponseJson;
import com.diquest.openapi.util.Suberror;
import com.diquest.openapi.util.UtilManager;
import com.diquest.openapi.util.info.ERROR_TYPE;
import com.diquest.openapi.videopotal.OpenAPIVideoQuickResponse;
import com.diquest.openapi.videopotal.OpenAPIVideoQuickResponseJson;
import com.diquest.openapi.videopotal.OpenAPIVideoResponse;
import com.diquest.openapi.videopotal.OpenAPIVideoResponseJson;
import com.diquest.openapi.videopotal.VideoService;
import com.diquest.openapi.videopotal.VideoVO;

@Component
@Path("/")
public class OpenAPI {
	@Autowired
	SearchService searchService;
	
	@Autowired
	VideoService videoService;
	
	@Autowired
	UflixService uflixService;
	
	@Autowired
	TvgService tvgService;
	
	@Autowired
	PopkeywordService popService;
	
	@Autowired
	LogService logService;
	
	@Value("${was_num}") private String was_num;
	@Value("${search.host}") private String searchHost;
	@Value("${search.port}") private int searchPort;
	
	@Value("${section.list}") private String sectionList;
	@Value("${quick.list}") private String quickList;
	
	@Value("${section_uflix.list}") private String sectionUflixList;
	@Value("${quick_uflix.list}") private String quickUflixList;
	
	@Value("${section_tvg.list}") private String sectionTvgList;
	@Value("${quick_tvg.list}") private String quickTvgList;
	
	public Logger logger = Logger.getLogger(this.getClass());
	
	private final String searchRequestURL                 = "/video";
	private final String searchVideoRequestURL       = "/search/vodlte/total";
	private final String searchUflixRequestURL         = "/search/uflixm/total";
	private final String searchTvgRequestURL         = "/search/uflix/total";
	private final String searchPopWordRequestURL = "/popkeyword/vodlte/keyword";
	private final String searchPopWordUflixRequestURL = "/popkeyword/uflixm/keyword";
	private final String searchTestRequestURL = "/wastest";
	private final String videoHangCheckRequestURL = "/video/HangCheck";
	private final String uflixMobileHangCheckRequestURL = "/uflixMobile/HangCheck";
	private final String uflixTvgHangCheckRequestURL = "/uflixTvg/HangCheck";
	private final String aliveCheckMessage = "Alive ACK!!!!";
	private final String aliveCheckResponseMessage = "I'm Alive";
	
	///////////////////////////////////////////// 관리도구 /////////////////////////////////////////////
	
	/**
	 *  관리도구 오타보정, 연관검색어
	 * @param input
	 * @param request
	 * @param uriInfo
	 * @return
	 */
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces({MediaType.TEXT_XML, MediaType.APPLICATION_JSON})
	@Path(searchRequestURL)
	public OpenAPIResponse searchPostProcess(String input, @Context HttpServletRequest request) {

		// 검색 요청 기본 정보 설정
		
		try {
//			System.out.println("### input : " + input);			
			// 검색 요청 변수 유효성 검사
			SearchVO searchVO = searchService.parseInput(input);
			searchVO.setHost(searchHost);	// 검색엔진 ip
			searchVO.setPort(searchPort);	// 검색엔진 port
			
			// 검색 수행
			return searchService.search(searchVO);
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			return null;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	
	///////////////////////////////////////////// VIDEO 통합검색/순간검색:자동완성 /////////////////////////////////////////////
	
	/**
	 * 통합검색 POST (xml, json)
	 * @param returnType
	 * @param URL
	 * @param w
	 * @param q
	 * @param section
	 * @param pg
	 * @param outmax
	 * @param sort
	 * @param p
	 * @param d
	 * @param csq
	 * @return
	 */
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Path(searchVideoRequestURL)
	public Response videoSearchPostProcess( 
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			 
			@FormParam("w") String w,
			@FormParam("q") String q,
			@FormParam("section") String section,
			@DefaultValue("1") @FormParam("pg") String pg,
			@DefaultValue("10") @FormParam("outmax") String outmax,
			@FormParam("sort") String sort,
			@FormParam("p") String p,
			@FormParam("d") String d,
			@FormParam("csq") String csq
			) {
		//	로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("VP");
		if ( w != null && w.equals("VODLTE") ) {
			logvo.setSVC_CMD("total");
		} else if ( w != null && w.equals("VODLTE_QUICK") ) {
			logvo.setSVC_CMD("typing");
		} else {
			logvo.setSVC_CMD("");
		}
		
		if ( section ==null || section.equals("") ) {
			logvo.setSECTION("N");
		} else {
			logvo.setSECTION(section);
		}
		
		Response result = null;
		
		// 파라미터 셋팅
		VideoVO vo = new VideoVO();
		vo.setReturnType(returnType);
		vo.setAuthKey(authKey);
		vo.setEncryptYn(encryptYn);
		vo.setUniqueKey(uniqueKey);
		vo.setUserSid(userSid);
		vo.setEmail(email);
		
		vo.setW(w);
		vo.setQ(q);
		vo.setSection(section);
		vo.setPg(pg);
		if ( outmax.equals("")) {
			outmax="10";
		}
		vo.setOutmax(outmax);
		vo.setSort(sort);
		vo.setP(p);
		vo.setD(d);
		vo.setCsq(csq);
		
		vo.setHost(searchHost);
		vo.setPort(searchPort);
		vo.setSectionList(sectionList);
		vo.setQuickList(quickList);
		
		try {
			
			// 동의어 사전
//			SynonymDict synonymDict = SynonymDict.getInstance(synonymDic);;
//			vo.setSynonymDict(synonymDict);
			
			// 검색 요청 변수 유효성 검사 & 디코드
			vo = UtilManager.checkVideoInfo(vo, "N", "video"); // N : 디코드 안함 ,  Y : 디코드 처리
			
			logvo.setKEYWORD(vo.getQ());
			
			if ( vo.hasErrorResponse() ) {	// 에러 O
				
				// suberror 담기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(vo.getErrorCode());
				suberror.setMessage(vo.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(vo.getErrorCode());
					response.setMessage(vo.getErrorResponse());
					
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(vo.getErrorCode());
					json_error.setMessage(vo.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				
				logvo.setRESULT_CODE(vo.getErrorCode());
				
			} // 에러 O ------ (END)
			else {	// 에러 X
				if(returnType.equals("text/xml")) {	// retrun-type : XML
					if(w != null && w.equals("VODLTE")) {
						OpenAPIVideoResponse videoResponse =  videoService.search(vo);	// 검색 수행
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
							
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
								
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} else if(w != null && w.equals("VODLTE_QUICK")) {
						OpenAPIVideoQuickResponse videoResponse =  videoService.searchQuick(vo);
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 X
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
								
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				} // retrun-type : XML ------ (END)
				else if(returnType.equals("application/json")) {	// retrun-type : json
					if(w != null && w.equals("VODLTE")) {
						OpenAPIVideoResponseJson videoResponse =  videoService.searchJson(vo);		// 검색 수행
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
								
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
						
					} else if(w != null && w.equals("VODLTE_QUICK")) {
						OpenAPIVideoQuickResponseJson videoResponse =  videoService.searchQuickJson(vo);
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 일때
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
								
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				}	//  retrun-type : json ------ (END)
			}	// 에러 X ------ (END)
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			String code="";
			if (w.equals("VODLTE")) {
				code = "1000";
			} else {
				code = "2000";
			}
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(code);
				
				response.setCode(code);
				if (code.equals("1000")){
					response.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					response.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					logvo.setRESULT_CODE("40002000");
				}
				
				suberrorList.add(suberror);
				
				response.setSuberror(suberrorList);
				
				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(code);
				
				json_error.setCode(code);
				if (code.equals("1000")){
					json_error.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					logvo.setRESULT_CODE("40003000");
				}
				
				suberrorList.add(suberror);
				
				json_error.setSuberror(suberrorList);
				
				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	
	/**
	 * 통합검색 - GET (xml, json)
	 * @param returnType
	 * @param w
	 * @param q
	 * @param p
	 * @param section
	 * @param pg
	 * @param outmax
	 * @param sort
	 * @param d
	 * @param csq
	 * @return
	 */
	@GET
	@Produces({MediaType.TEXT_XML, MediaType.APPLICATION_JSON})
	@Path(searchVideoRequestURL+"/{w}/{q}/{section}/{pg}/{outmax}/{sort}/{p}/{d}/{csq}")
	public Response videoSearchGetProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@PathParam("w") String w, 
			@PathParam("q") String q, 
			@PathParam("p") String p,
			@PathParam("section") String section, 
			@PathParam("pg") String pg, 
			@PathParam("outmax") String outmax, 
			@PathParam("sort") String sort, 
			@PathParam("d") String d, 
			@PathParam("csq") String csq) {
		
		Response result = null;
		// get파라미터 셋팅
		VideoVO getVO = new VideoVO();
		getVO.setReturnType(returnType);
		getVO.setAuthKey(authKey);
		getVO.setEncryptYn(encryptYn);
		getVO.setUniqueKey(uniqueKey);
		getVO.setUserSid(userSid);
		getVO.setEmail(email);
		
		getVO.setW(w);
		getVO.setQ(q.replaceFirst("q=", ""));
		getVO.setPg((pg+"").replaceFirst("pg=", ""));
		getVO.setP(p.replaceFirst("p=", ""));
		getVO.setSection(section.replaceFirst("section=", ""));
		getVO.setOutmax(outmax.replaceFirst("outmax=", ""));
		if ( outmax !=null && outmax.equals("")) {
			outmax="10";
		}
		
		getVO.setSort(sort.replaceFirst("sort=", ""));
		getVO.setD(d.replaceFirst("d=", ""));
		getVO.setCsq(csq.replaceFirst("csq=", ""));
		
		getVO.setHost(searchHost);
		getVO.setPort(searchPort);
		getVO.setSectionList(sectionList);
		getVO.setQuickList(quickList);
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("VP");
		if ( w != null && w.equals("VODLTE") ) {
			logvo.setSVC_CMD("total");
		} else if ( w != null && w.equals("VODLTE_QUICK") ) {
			logvo.setSVC_CMD("typing");
		} else {
			logvo.setSVC_CMD("");
		}
		if ( section ==null || section.equals("") ) {
			logvo.setSECTION("N");
		} else {
			logvo.setSECTION(section);
		}
		
		try {
			
			// 검색 요청 변수 유효성 검사 & 디코드
			getVO = UtilManager.checkVideoInfo(getVO, "Y", "video");	 // N : 디코드 안함 ,  Y : 디코드 처리
			
			logvo.setKEYWORD(getVO.getQ());
			
			if ( getVO.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(getVO.getErrorCode());
				suberror.setMessage(getVO.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(getVO.getErrorCode());
					response.setMessage(getVO.getErrorResponse());
					
					response.setSuberror(suberrorList);
					result =  Response.ok(response, MediaType.TEXT_XML).build();
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(getVO.getErrorCode());
					json_error.setMessage(getVO.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				
				logvo.setRESULT_CODE(getVO.getErrorCode());
			} // 에러 O ------ (END)
			else {	// 에러 X
				if(returnType.equals("text/xml")) {	// retrun-type : XML
					if(w != null && w.equals("VODLTE")) {
						OpenAPIVideoResponse videoResponse =  videoService.search(getVO);	// 검색 수행
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} else if(w != null && w.equals("VODLTE_QUICK")) {
						OpenAPIVideoQuickResponse videoResponse =  videoService.searchQuick(getVO);
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 X
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();

							//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
							// suberror 담기
							List suberrorList = new ArrayList<Suberror>();
							Suberror suberror = new Suberror();
							suberror.setName(getVO.getW());
							suberror.setCode(response.getCode());
							suberror.setMessage(response.getMessage());
							suberrorList.add(suberror);

							response.setSuberror(suberrorList);
							
							result =  Response.ok(response, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				} // retrun-type : XML ------ (END)
				else if(returnType.equals("application/json")) {	// 시작 retrun-type : json
					if(w != null && w.equals("VODLTE")) {
						OpenAPIVideoResponseJson videoResponse =  videoService.searchJson(getVO);		// 검색 수행
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {							
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
						
					} else if(w != null && w.equals("VODLTE_QUICK")) {
						OpenAPIVideoQuickResponseJson videoResponse =  videoService.searchQuickJson(getVO);
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 일때
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
								
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								response.getJson_Error().getCode();
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				}	//  retrun-type : json ------ (END)
			}	// 에러 X ------ (END)
			
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			String code="";
			if (w.equals("VODLTE")) {
				code = "1000";
			} else {
				code = "2000";
			}
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(code);

				response.setCode(code);
				if (code.equals("1000")){
					response.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					response.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					logvo.setRESULT_CODE("40002000");
				}
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(code);
				
				json_error.setCode(code);
				if (code.equals("1000")){
					json_error.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					logvo.setRESULT_CODE("40003000");
				}
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	


	///////////////////////////////////////////// UFILX 통합검색/순간검색:자동완성 /////////////////////////////////////////////
	
	/**
	 * UFILX  통합검색 POST (xml, json)
	 * @param returnType
	 * @param URL
	 * @param w
	 * @param q
	 * @param section
	 * @param pg
	 * @param outmax
	 * @param sort
	 * @param p
	 * @param d
	 * @param csq
	 * @return
	 */
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Path(searchUflixRequestURL)
	public Response uflixSearchPostProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			 
			@FormParam("w") String w,
			@FormParam("q") String q,
			@FormParam("section") String section,
			@DefaultValue("1") @FormParam("pg") String pg,
			@DefaultValue("10") @FormParam("outmax") String outmax,
			@FormParam("sort") String sort,
			@FormParam("p") String p,
			@FormParam("trunc") String trunc,
			@FormParam("d") String d
			) {
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("UFX");
		if ( w != null && w.equals("UFLIX_MOBILE") ) {
			logvo.setSVC_CMD("total");
		} else if ( w != null && w.equals("UFLIX_MOBILE_QUICK") ) {
			logvo.setSVC_CMD("typing");
		} else {
			logvo.setSVC_CMD("");
		}
		if ( section ==null || section.equals("") ) {
			logvo.setSECTION("N");
		} else {
			logvo.setSECTION(section);
		}
		
		Response result = null;
		// 파라미터 셋팅
		VideoVO vo = new VideoVO();
		vo.setReturnType(returnType);
		vo.setAuthKey(authKey);
		vo.setEncryptYn(encryptYn);
		vo.setUniqueKey(uniqueKey);
		vo.setUserSid(userSid);
		vo.setEmail(email);
		
		vo.setW(w);
		vo.setQ(q);
		if ( vo.getW() != null && vo.getW().equals("UFLIX_MOBILE_QUICK")) {
			vo.setSection("");
		} else {
			vo.setSection(section);
		}
		vo.setPg(pg);
		if ( outmax.equals("")) {
			outmax="10";
		}
		vo.setOutmax(outmax);
		vo.setSort(sort);
		vo.setP(p);
		vo.setTrunc(trunc);
		vo.setD(d);
		
		vo.setHost(searchHost);
		vo.setPort(searchPort);
		vo.setSectionList(sectionUflixList);
		vo.setQuickList(quickUflixList);
		
		try {
			
			
			// 검색 요청 변수 유효성 검사 & 디코드
			vo = UtilManager.checkVideoInfo(vo, "N", "uflix"); // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD(vo.getQ());
			
			if ( vo.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(vo.getErrorCode());
				suberror.setMessage(vo.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(vo.getErrorCode());
					response.setMessage(vo.getErrorResponse());
					response.setSuberror(suberrorList);
					result =  Response.ok(response, MediaType.TEXT_XML).build();
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(vo.getErrorCode());
					json_error.setMessage(vo.getErrorResponse());
					json_error.setSuberror(suberrorList);
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				
				logvo.setRESULT_CODE(vo.getErrorCode());
			} // 에러 O ------ (END)
			else {	// 에러 X
				if(returnType.equals("text/xml")) {	// retrun-type : XML
					if(w != null && w.equals("UFLIX_MOBILE")) {
						OpenAPIUflixResponse videoResponse =  uflixService.search(vo);	// 검색 수행
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} else if(w != null && w.equals("UFLIX_MOBILE_QUICK")) {
						OpenAPIUflixQuickResponse videoResponse =  uflixService.searchQuick(vo);
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 X
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} 
				} // retrun-type : XML ------ (END)
				else if(returnType.equals("application/json")) {	// retrun-type : json
					if(w != null && w.equals("UFLIX_MOBILE")) {
						OpenAPIUflixResponseJson videoResponse =  uflixService.searchJson(vo);		// 검색 수행
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
						
					} else if(w != null && w.equals("UFLIX_MOBILE_QUICK")) {
						OpenAPIUflixQuickResponseJson videoResponse =  uflixService.searchQuickJson(vo);
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 일때
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				}	//  retrun-type : json ------ (END)
			}	// 에러 X ------ (END)
			
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			String code="";
			if (w.equals("UFLIX_MOBILE")) {
				code = "1000";
			} else {
				code = "2000";
			}
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(code);
				
				response.setCode(code);
				if (code.equals("1000")){
					response.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					response.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					logvo.setRESULT_CODE("40002000");
				}
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);
				
				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(code);
				
				json_error.setCode(code);
				if (code.equals("1000")){
					json_error.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					logvo.setRESULT_CODE("40003000");
				}
				
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				
			}
			
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	
	/**
	 * UFILX  통합검색 - GET (xml, json)
	 * @param returnType
	 * @param w
	 * @param q
	 * @param p
	 * @param section
	 * @param pg
	 * @param outmax
	 * @param sort
	 * @param d
	 * @param csq
	 * @return
	 */
	@GET
	@Produces({MediaType.TEXT_XML, MediaType.APPLICATION_JSON})
	@Path(searchUflixRequestURL+"/{w}/{q}/{section}/{pg}/{outmax}/{sort}/{p}/{d}")
	public Response uflixSearchGetProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@PathParam("w") String w, 
			@PathParam("q") String q, 
			@PathParam("p") String p,
			@PathParam("section") String section, 
			@PathParam("pg") String pg, 
			@PathParam("outmax") String outmax, 
			@PathParam("sort") String sort, 
			@PathParam("d") String d) {
		Response result = null;
		// get파라미터 셋팅
		VideoVO getVO = new VideoVO();
		getVO.setReturnType(returnType);
		getVO.setAuthKey(authKey);
		getVO.setEncryptYn(encryptYn);
		getVO.setUniqueKey(uniqueKey);
		getVO.setUserSid(userSid);
		getVO.setEmail(email);
		
		getVO.setW(w);
		getVO.setQ(q.replaceFirst("q=", ""));
		getVO.setPg((pg+"").replaceFirst("pg=", ""));
		getVO.setP(p.replaceFirst("p=", ""));
		getVO.setSection(section.replaceFirst("section=", ""));
		if ( getVO.getW() != null && getVO.getW().equals("UFLIX_MOBILE_QUICK")) {
			getVO.setSection("");
		}
		
		getVO.setOutmax(outmax.replaceFirst("outmax=", ""));
		if ( outmax !=null && outmax.equals("")) {
			outmax="10";
		}
		getVO.setSort(sort.replaceFirst("sort=", ""));
		getVO.setD(d.replaceFirst("d=", ""));
		
		getVO.setHost(searchHost);
		getVO.setPort(searchPort);
		getVO.setSectionList(sectionUflixList);
		getVO.setQuickList(quickUflixList);
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("UFX");
		if ( w != null && w.equals("UFLIX_MOBILE") ) {
			logvo.setSVC_CMD("total");
		} else if ( w != null && w.equals("UFLIX_MOBILE_QUICK") ) {
			logvo.setSVC_CMD("typing");
		} else {
			logvo.setSVC_CMD("");
		}
		if ( section ==null || section.equals("") ) {
			logvo.setSECTION("N");
		} else {
			logvo.setSECTION(section);
		}
		try {
			
			
			// 검색 요청 변수 유효성 검사 & 디코드
			getVO = UtilManager.checkVideoInfo(getVO, "Y", "uflix");	 // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD(getVO.getQ());
			
			if ( getVO.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(getVO.getErrorCode());
				suberror.setMessage(getVO.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(getVO.getErrorCode());
					response.setMessage(getVO.getErrorResponse());
					
					response.setSuberror(suberrorList);
					result =  Response.ok(response, MediaType.TEXT_XML).build();
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(getVO.getErrorCode());
					json_error.setMessage(getVO.getErrorResponse());
					json_error.setSuberror(suberrorList);
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				
				logvo.setRESULT_CODE(getVO.getErrorCode());
			} // 에러 O ------ (END)
			else {	// 에러 X
				if(returnType.equals("text/xml")) {	// retrun-type : XML
					if(w != null && w.equals("UFLIX_MOBILE")) {
						OpenAPIUflixResponse videoResponse =  uflixService.search(getVO);	// 검색 수행
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} else if(w != null && w.equals("UFLIX_MOBILE_QUICK")) {
						OpenAPIUflixQuickResponse videoResponse =  uflixService.searchQuick(getVO);
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 X
							OpenAPIErrorResponse response =  videoResponse.getErrorResponse();
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								videoResponse.setErrorResponse(null);
								result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				} // retrun-type : XML ------ (END)
				else if(returnType.equals("application/json")) {	// retrun-type : json
					if(w != null && w.equals("UFLIX_MOBILE")) {
						OpenAPIUflixResponseJson videoResponse =  uflixService.searchJson(getVO);		// 검색 수행
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
						
					} else if(w != null && w.equals("UFLIX_MOBILE_QUICK")) {
						OpenAPIUflixQuickResponseJson videoResponse =  uflixService.searchQuickJson(getVO);
						
						if ( videoResponse.getErrorResponse() != null ) {	// 검색 에러 일때
							OpenAPIErrorResponseJson response =  videoResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(videoResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				}	//  retrun-type : json ------ (END)
			}	// 에러 X ------ (END)
			
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			String code="";
			if (w.equals("UFLIX_MOBILE")) {
				code = "1000";
			} else {
				code = "2000";
			}
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(code);
				
				response.setCode(code);
				if (code.equals("1000")){
					response.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					response.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					logvo.setRESULT_CODE("40002000");
				}
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();
				
			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(code);
				
				json_error.setCode(code);
				if (code.equals("1000")){
					json_error.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					logvo.setRESULT_CODE("40003000");
				}
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				
			}
			
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	

	
	///////////////////////////////////////////// tvg,PC  통합검색/순간검색:자동완성 /////////////////////////////////////////////
	
	/**
	 * tvg,PC 통합검색 POST (xml, json)
	 * @param returnType
	 * @param URL
	 * @param w
	 * @param q
	 * @param section
	 * @param pg
	 * @param outmax
	 * @param sort
	 * @param p
	 * @param d
	 * @param csq
	 * @return
	 */
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Path(searchTvgRequestURL)
	public Response tvgSearchPostProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			 
			@FormParam("w") String w,
			@FormParam("q") String q,
			@FormParam("section") String section,
			@DefaultValue("1") @FormParam("pg") String pg,
			@DefaultValue("10") @FormParam("outmax") String outmax,
			@FormParam("sort") String sort,
			@FormParam("p") String p,
			@FormParam("d") String d
			) {
		Response result = null;
		
		// 파라미터 셋팅
		VideoVO vo = new VideoVO();
		vo.setReturnType(returnType);
		vo.setAuthKey(authKey);
		vo.setEncryptYn(encryptYn);
		vo.setUniqueKey(uniqueKey);
		vo.setUserSid(userSid);
		vo.setEmail(email);
		
		vo.setW(w);
		vo.setQ(q);
		
		if ( vo.getW() != null && vo.getW().equals("UFLIX_TVG_QUICK")) {
			vo.setSection("");
		} else {
			vo.setSection(section);
		}
		
		vo.setPg(pg);
		if ( outmax.equals("")) {
			outmax="10";
		}
		vo.setOutmax(outmax);
		vo.setSort(sort);
		vo.setP(p);
		vo.setD(d);
		
		vo.setHost(searchHost);
		vo.setPort(searchPort);
		vo.setSectionList(sectionTvgList);
		vo.setQuickList(quickTvgList);
		
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("UFX");
		if ( w != null && w.equals("UFLIX_TVG") ) {
			logvo.setSVC_CMD("total");
		} else if ( w != null && w.equals("UFLIX_TVG_QUICK") ) {
			logvo.setSVC_CMD("typing");
		} else {
			logvo.setSVC_CMD("");
		}
		if ( section ==null || section.equals("") ) {
			logvo.setSECTION("N");
		} else {
			logvo.setSECTION(section);
		}
		try {
			
			
			// 검색 요청 변수 유효성 검사 & 디코드
			vo = UtilManager.checkVideoInfo(vo, "N", "tvg"); // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD(vo.getQ());
			if ( vo.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(vo.getErrorCode());
				suberror.setMessage(vo.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(vo.getErrorCode());
					response.setMessage(vo.getErrorResponse());
					
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(vo.getErrorCode());
					json_error.setMessage(vo.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				logvo.setRESULT_CODE(vo.getErrorCode());
			} // 에러 O ------ (END)
			else {	// 에러 X
				if(returnType.equals("text/xml")) {	// retrun-type : XML
					if(w != null && w.equals("UFLIX_TVG")) {
						OpenAPITvgResponse tvgResponse =  tvgService.search(vo);	// 검색 수행
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponse response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								tvgResponse.setErrorResponse(null);
								result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} else if(w != null && w.equals("UFLIX_TVG_QUICK")) {
						OpenAPITvgQuickResponse tvgResponse =  tvgService.searchQuick(vo);
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 X
							OpenAPIErrorResponse response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								tvgResponse.setErrorResponse(null);
								result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				} // retrun-type : XML ------ (END)
				else if(returnType.equals("application/json")) {	// retrun-type : json
					if(w != null && w.equals("UFLIX_TVG")) {
						OpenAPITvgResponseJson tvgResponse =  tvgService.searchJson(vo);		// 검색 수행
						
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponseJson response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
						
					} else if(w != null && w.equals("UFLIX_TVG_QUICK")) {
						OpenAPITvgQuickResponseJson tvgResponse =  tvgService.searchQuickJson(vo);
						
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 일때
							OpenAPIErrorResponseJson response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(vo.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				}	//  retrun-type : json ------ (END)
			}	// 에러 X ------ (END)
			
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			String code="";
			if (w.equals("UFLIX_TVG")) {
				code = "1000";
			} else {
				code = "2000";
			}
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(code);
				
				response.setCode(code);
				if (code.equals("1000")){
					response.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					response.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					logvo.setRESULT_CODE("40002000");
				}
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(code);
				
				json_error.setCode(code);
				if (code.equals("1000")){
					json_error.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					logvo.setRESULT_CODE("40003000");
				}
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	
	/**
	 * tvg,PC 통합검색 - GET (xml, json)
	 * @param returnType
	 * @param w
	 * @param q
	 * @param p
	 * @param section
	 * @param pg
	 * @param outmax
	 * @param sort
	 * @param d
	 * @param csq
	 * @return
	 */
	@GET
	@Produces({MediaType.TEXT_XML, MediaType.APPLICATION_JSON})
	@Path(searchTvgRequestURL+"/{w}/{q}/{section}/{pg}/{outmax}/{sort}/{p}/{d}")
	public Response tvgSearchGetProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@PathParam("w") String w, 
			@PathParam("q") String q, 
			@PathParam("p") String p,
			@PathParam("section") String section, 
			@PathParam("pg") String pg, 
			@PathParam("outmax") String outmax, 
			@PathParam("sort") String sort, 
			@PathParam("d") String d) {
		
		Response result = null;
		// get파라미터 셋팅
		VideoVO getVO = new VideoVO();
		getVO.setReturnType(returnType);
		getVO.setAuthKey(authKey);
		getVO.setEncryptYn(encryptYn);
		getVO.setUniqueKey(uniqueKey);
		getVO.setUserSid(userSid);
		getVO.setEmail(email);
		
		getVO.setW(w);
		getVO.setQ(q.replaceFirst("q=", ""));
		getVO.setPg((pg+"").replaceFirst("pg=", ""));
		getVO.setP(p.replaceFirst("p=", ""));
		getVO.setSection(section.replaceFirst("section=", ""));
		if ( getVO.getW() != null && getVO.getW().equals("UFLIX_TVG_QUICK")) {
			getVO.setSection("");
		}
		
		getVO.setOutmax(outmax.replaceFirst("outmax=", ""));
		if ( outmax !=null && outmax.equals("")) {
			outmax="10";
		}
		getVO.setSort(sort.replaceFirst("sort=", ""));
		getVO.setD(d.replaceFirst("d=", ""));
		
		getVO.setHost(searchHost);
		getVO.setPort(searchPort);
		getVO.setSectionList(sectionTvgList);
		getVO.setQuickList(quickTvgList);
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("UFX");
		if ( w != null && w.equals("UFLIX_TVG") ) {
			logvo.setSVC_CMD("total");
		} else if ( w != null && w.equals("UFLIX_TVG_QUICK") ) {
			logvo.setSVC_CMD("typing");
		} else {
			logvo.setSVC_CMD("");
		}
		if ( section ==null || section.equals("") ) {
			logvo.setSECTION("N");
		} else {
			logvo.setSECTION(section);
		}
		
		try {
			
			// 검색 요청 변수 유효성 검사 & 디코드
			getVO = UtilManager.checkVideoInfo(getVO, "Y", "tvg");	 // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD(getVO.getQ());
			
			if ( getVO.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(getVO.getErrorCode());
				suberror.setMessage(getVO.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(getVO.getErrorCode());
					response.setMessage(getVO.getErrorResponse());
					
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(getVO.getErrorCode());
					json_error.setMessage(getVO.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				logvo.setRESULT_CODE(getVO.getErrorCode());
			} // 에러 O ------ (END)
			else {	// 에러 X
				if(returnType.equals("text/xml")) {	// retrun-type : XML
					if(w != null && w.equals("UFLIX_TVG")) {
						OpenAPITvgResponse tvgResponse =  tvgService.search(getVO);	// 검색 수행
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponse response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								tvgResponse.setErrorResponse(null);
								result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					} else if(w != null && w.equals("UFLIX_TVG_QUICK")) {
						OpenAPITvgQuickResponse tvgResponse =  tvgService.searchQuick(getVO);
						if (tvgResponse.getErrorResponse() != null ) {	// 검색 에러 X
							OpenAPIErrorResponse response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getCode().equals("20001000") ) {
								tvgResponse.setErrorResponse(null);
								result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getCode());
								suberror.setMessage(response.getMessage());
								suberrorList.add(suberror);
	
								response.setSuberror(suberrorList);
								
								result =  Response.ok(response, MediaType.TEXT_XML).build();
								logvo.setRESULT_CODE(response.getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				} // retrun-type : XML ------ (END)
				else if(returnType.equals("application/json")) {	// 시작 retrun-type : json
					if(w != null && w.equals("UFLIX_TVG")) {
						OpenAPITvgResponseJson tvgResponse =  tvgService.searchJson(getVO);		// 검색 수행
						
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 O
							OpenAPIErrorResponseJson response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
						
					} else if(w != null && w.equals("UFLIX_TVG_QUICK")) {
						OpenAPITvgQuickResponseJson tvgResponse =  tvgService.searchQuickJson(getVO);
						
						if ( tvgResponse.getErrorResponse() != null ) {	// 검색 에러 일때
							OpenAPIErrorResponseJson response =  tvgResponse.getErrorResponse();
							
//							검색성공했지만 건수가 0 일때
							if (response.getJson_Error().getCode().equals("20001000") ) {
								result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE("20001000");
							} else {
								// suberror 담기
								List suberrorList = new ArrayList<Suberror>();
								Suberror suberror = new Suberror();
								suberror.setName(getVO.getW());
								suberror.setCode(response.getJson_Error().getCode());
								suberror.setMessage(response.getJson_Error().getMessage());
								suberrorList.add(suberror);
	
								Json_Error error = response.getJson_Error();
								error.setSuberror(suberrorList);
								response.setJson_Error(error);
								
								result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
								logvo.setRESULT_CODE(response.getJson_Error().getCode());
							}
						} else {
							result =  Response.ok(tvgResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
				}	//  retrun-type : json ------ (END)
			}	// 에러 X ------ (END)
			
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			String code="";
			if (w.equals("UFLIX_TVG")) {
				code = "1000";
			} else {
				code = "2000";
			}
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(code);
				
				response.setCode(code);
				if (code.equals("1000")){
					response.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					response.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40002000.getErrorMessage());
					logvo.setRESULT_CODE("40002000");
				}
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(code);
				
				json_error.setCode(code);
				if (code.equals("1000")){
					json_error.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40001000.getErrorMessage());
					logvo.setRESULT_CODE("40001000");
				} else {
					json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
					logvo.setRESULT_CODE("40003000");
					
				}
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				
			}
			
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	

	
	///////////////////////////////////////////// 인기검색어 검색 API /////////////////////////////////////////////
	
	/**
	 * 비디오 포털 인기검색어 - POST (xml, json)
	 * @param returnType
	 * @param w
	 * @param cycle
	 * @param date
	 * @param pg
	 * @param outmax
	 * @param base64
	 * @return
	 */
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Path(searchPopWordRequestURL)
	public Response popWordSearchPostProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@FormParam("w") String w,
			@FormParam("cycle") String cycle,
			@FormParam("date") String date,
			@DefaultValue("1") @FormParam("pg") String pg,
			@DefaultValue("10") @FormParam("outmax") String outmax,
			@FormParam("base64") String base64
			) {
		
		Response result = null;
		
		// 파라미터 셋팅
		PopkeywordVO vo = new PopkeywordVO();
		vo.setReturnType(returnType);
		vo.setAuthKey(authKey);
		vo.setEncryptYn(encryptYn);
		vo.setUniqueKey(uniqueKey);
		vo.setUserSid(userSid);
		vo.setEmail(email);
		
		vo.setW(w);
		vo.setCycle(cycle);
		vo.setDate(date);
		vo.setPg(pg);
		vo.setOutmax(outmax);
		vo.setBase64(base64);
		
		vo.setHost(searchHost);
		vo.setPort(searchPort);
		
		vo.setModel("video");
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("VP");
		logvo.setSVC_CMD("hotkeyword");
		logvo.setSECTION("N");
		
		try {
			
			// 검색 요청 변수 유효성 검사
			vo = UtilManager.checkPopInfo(vo , "N", "video");	 // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD("");
			
			if ( vo.hasErrorResponse() ) {	// 에러 O
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(vo.getErrorCode());
				suberror.setMessage(vo.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(vo.getErrorCode());
					response.setMessage(vo.getErrorResponse());
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
	
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(vo.getErrorCode());
					json_error.setMessage(vo.getErrorResponse());
					json_error.setSuberror(suberrorList);
					response.setJson_Error(json_error);
					
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				
				logvo.setRESULT_CODE(vo.getErrorCode());
			}	// 에러 O ------ (END) 
			else {	// 에러 X
				// 검색 수행
				if(returnType.equals("text/xml")) {
					OpenAPIPopWordResponse popWordResponse =  popService.search(vo);
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponse response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(vo.getW());
						suberror.setCode(response.getCode());
						suberror.setMessage(response.getMessage());
						suberrorList.add(suberror);

						response.setSuberror(suberrorList);
						
						result =  Response.ok(response, MediaType.TEXT_XML).build();
						logvo.setRESULT_CODE(response.getCode());
					} else {
						if ( popWordResponse.getMeta_storage_list().get(0).getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
//							response.setCode("20001000");
//							response.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(vo.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							response.setSuberror(suberrorList);
							
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				} else if(returnType.equals("application/json")) {
					OpenAPIPopWordResponseJson popWordResponse = popService.searchJson(vo);
					
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponseJson response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(vo.getW());
						suberror.setCode(response.getJson_Error().getCode());
						suberror.setMessage(response.getJson_Error().getMessage());
						suberrorList.add(suberror);

						Json_Error error = response.getJson_Error();
						error.setSuberror(suberrorList);
						response.setJson_Error(error);
						
						result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
						logvo.setRESULT_CODE(response.getJson_Error().getCode());
					} else {
						if ( popWordResponse.getJson_Statis().getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
//							
//							Json_Error error = new Json_Error();
//							error.setCode("20001000");
//							error.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(vo.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							error.setSuberror(suberrorList);
//							response.setJson_Error(error);
							
							result =  Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result = Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				}
			}	// 에러 X ------ (END)
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode("3000");
				
				response.setCode("3000");
				response.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode("3000");
				
				json_error.setCode("3000");
				json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	
	/**
	 * 비디오 포털 인기검색어 - GET (xml, json)
	 * @param returnType
	 * @param w
	 * @param cycle
	 * @param date
	 * @param pg
	 * @param outmax
	 * @param base64
	 * @return
	 */
	@GET
	@Path(searchPopWordRequestURL+"/{w}/{cycle}/{date}/{pg}/{outmax}/{base64}")
	public Response popWordSearchGetProcess( 
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@PathParam("w") String w, 
			@PathParam("cycle") String cycle, 
			@PathParam("date") String date,
			@PathParam("pg") String pg, 
			@PathParam("outmax") String outmax, 
			@PathParam("base64") String base64
			) {
		
		Response result = null;
		
		// get파라미터 셋팅
		PopkeywordVO getVO = new PopkeywordVO();
		getVO.setReturnType(returnType);
		getVO.setAuthKey(authKey);
		getVO.setEncryptYn(encryptYn);
		getVO.setUniqueKey(uniqueKey);
		getVO.setUserSid(userSid);
		getVO.setEmail(email);
		
		getVO.setW(w);
		getVO.setCycle(cycle.replaceFirst("cycle=", ""));
		getVO.setDate((date+"").replaceFirst("date=", ""));
		getVO.setPg(pg.replaceFirst("pg=", ""));
		getVO.setOutmax(outmax.replaceFirst("outmax=", ""));
		getVO.setBase64(base64.replaceFirst("base64=", ""));
		
		getVO.setHost(searchHost);
		getVO.setPort(searchPort);
		getVO.setModel("video");
		
//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("VP");
		logvo.setSVC_CMD("hotkeyword");
		logvo.setSECTION("N");
		try {
			
			// 검색 요청 변수 유효성 검사
			getVO = UtilManager.checkPopInfo(getVO,"N" , "video");	 // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD("");
			if ( getVO.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(getVO.getErrorCode());
				suberror.setMessage(getVO.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(getVO.getErrorCode());
					response.setMessage(getVO.getErrorResponse());
					
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
					logvo.setRESULT_CODE(getVO.getErrorCode());
	
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(getVO.getErrorCode());
					json_error.setMessage(getVO.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
					logvo.setRESULT_CODE(getVO.getErrorCode());
				}
				
			}	// 에러 O ------ (END) 
			else {	// 에러 X
				// 검색 수행
				if(returnType.equals("text/xml")) {
					OpenAPIPopWordResponse popWordResponse =  popService.search(getVO);
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponse response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(getVO.getW());
						suberror.setCode(response.getCode());
						suberror.setMessage(response.getMessage());
						suberrorList.add(suberror);

						response.setSuberror(suberrorList);
						
						result =  Response.ok(response, MediaType.TEXT_XML).build();
						logvo.setRESULT_CODE(response.getCode());
					} else {
						if ( popWordResponse.getMeta_storage_list().get(0).getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
//							response.setCode("20001000");
//							response.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(getVO.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							response.setSuberror(suberrorList);
							
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				} else if(returnType.equals("application/json")) {
					OpenAPIPopWordResponseJson popWordResponse = popService.searchJson(getVO);
					
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponseJson response =  popWordResponse.getErrorResponse();
						
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(getVO.getW());
						suberror.setCode(response.getJson_Error().getCode());
						suberror.setMessage(response.getJson_Error().getMessage());
						suberrorList.add(suberror);

						Json_Error error = response.getJson_Error();
						error.setSuberror(suberrorList);
						response.setJson_Error(error);
						
						result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
						logvo.setRESULT_CODE(response.getJson_Error().getCode());
					} else {
						if ( popWordResponse.getJson_Statis().getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
//							
//							Json_Error error = response.getJson_Error();
//							error.setCode("20001000");
//							error.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(getVO.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							
//							error.setSuberror(suberrorList);
//							response.setJson_Error(error);
							
							result =  Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result = Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				}
			}	// 에러 X ------ (END)
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode("3000");
				
				response.setCode("3000");
				response.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode("3000");
				
				json_error.setCode("3000");
				json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
				
	}
	
	/**
	 * 유플릭스 인기검색어 - POST (xml, json)
	 * @param returnType
	 * @param w
	 * @param cycle
	 * @param date
	 * @param pg
	 * @param outmax
	 * @param base64
	 * @return
	 */
	@POST
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	@Path(searchPopWordUflixRequestURL)
	public Response popWordUflixSearchPostProcess(
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@FormParam("w") String w,
			@FormParam("cycle") String cycle,
			@FormParam("date") String date,
			@DefaultValue("1") @FormParam("pg") String pg,
			@DefaultValue("10") @FormParam("outmax") String outmax,
			@FormParam("base64") String base64
			) {
		
		Response result = null;
		
		// 파라미터 셋팅
		PopkeywordVO vo = new PopkeywordVO();
		vo.setReturnType(returnType);
		vo.setAuthKey(authKey);
		vo.setEncryptYn(encryptYn);
		vo.setUniqueKey(uniqueKey);
		vo.setUserSid(userSid);
		vo.setEmail(email);
		
		vo.setW(w);
		vo.setCycle(cycle);
		vo.setDate(date);
		vo.setPg(pg);
		vo.setOutmax(outmax);
		vo.setBase64(base64);
		
		vo.setHost(searchHost);
		vo.setPort(searchPort);
		vo.setModel("uflix");
		
//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("UFX");
		logvo.setSVC_CMD("hotkeyword");
		logvo.setSECTION("N");
		try {
			
			// 검색 요청 변수 유효성 검사
			vo = UtilManager.checkPopInfo(vo , "N", "uflix");	 // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD("");
			
			if ( vo.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode(vo.getErrorCode());
				suberror.setMessage(vo.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(vo.getErrorCode());
					response.setMessage(vo.getErrorResponse());
					
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
	
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(vo.getErrorCode());
					json_error.setMessage(vo.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				
				logvo.setRESULT_CODE(vo.getErrorCode());
			}	// 에러 O ------ (END) 
			else {	// 에러 X
				// 검색 수행
				if(returnType.equals("text/xml")) {
					OpenAPIPopWordResponse popWordResponse =  popService.search(vo);
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponse response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(vo.getW());
						suberror.setCode(response.getCode());
						suberror.setMessage(response.getMessage());
						suberrorList.add(suberror);

						response.setSuberror(suberrorList);

						
						result =  Response.ok(response, MediaType.TEXT_XML).build();
						logvo.setRESULT_CODE(response.getCode());
					} else {
						if ( popWordResponse.getMeta_storage_list().get(0).getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
//							
//							response.setCode("20001000");
//							response.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(vo.getW());
//							suberror.setCode(response.getCode());
//							suberror.setMessage(response.getMessage());
//							suberrorList.add(suberror);
//
//							response.setSuberror(suberrorList);
							
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20001000");

						} else {
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");

						}
					}
					
				} else if(returnType.equals("application/json")) {
					OpenAPIPopWordResponseJson popWordResponse = popService.searchJson(vo);
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponseJson response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(vo.getW());
						suberror.setCode(response.getJson_Error().getCode());
						suberror.setMessage(response.getJson_Error().getMessage());
						suberrorList.add(suberror);

						Json_Error error = response.getJson_Error();
						error.setSuberror(suberrorList);
						response.setJson_Error(error);
						
						result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
						logvo.setRESULT_CODE(response.getJson_Error().getCode());
					} else {
						if ( popWordResponse.getJson_Statis().getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
//							Json_Error error = new Json_Error();
//							error.setCode("20001000");
//							error.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(vo.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							error.setSuberror(suberrorList);
//							response.setJson_Error(error);
							
							result =  Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result = Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				}
			}	// 에러 X ------ (END)
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode("3000");

				
				response.setCode("3000");
				response.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(vo.getW());
				suberror.setCode("3000");
				
				json_error.setCode("3000");
				json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
		
	}
	
	/**
	 * 유플릭스 인기검색어 - GET (xml, json)
	 * @param returnType
	 * @param w
	 * @param cycle
	 * @param date
	 * @param pg
	 * @param outmax
	 * @param base64
	 * @return
	 */
	@GET
	@Path(searchPopWordUflixRequestURL+"/{w}/{cycle}/{date}/{pg}/{outmax}/{base64}")
	public Response popWordUfilixSearchGetProcess( 
			@DefaultValue("text/xml") @HeaderParam("return-type") String returnType,
			@HeaderParam("auth-key") String authKey,
			@HeaderParam("encrypt-yn") String encryptYn,
			@HeaderParam("unique_key") String uniqueKey,
			@HeaderParam("user-sid") String userSid,
			@HeaderParam("email") String email,
			
			@PathParam("w") String w, 
			@PathParam("cycle") String cycle, 
			@PathParam("date") String date,
			@PathParam("pg") String pg, 
			@PathParam("outmax") String outmax, 
			@PathParam("base64") String base64
			) {
		
		Response result = null;
		
		// get파라미터 셋팅
		PopkeywordVO getVO = new PopkeywordVO();
		getVO.setReturnType(returnType);
		getVO.setAuthKey(authKey);
		getVO.setEncryptYn(encryptYn);
		getVO.setUniqueKey(uniqueKey);
		getVO.setUserSid(userSid);
		getVO.setEmail(email);
		
		getVO.setW(w);
		getVO.setCycle(cycle.replaceFirst("cycle=", ""));
		getVO.setDate((date+"").replaceFirst("date=", ""));
		getVO.setPg(pg.replaceFirst("pg=", ""));
		getVO.setOutmax(outmax.replaceFirst("outmax=", ""));
		getVO.setBase64(base64.replaceFirst("base64=", ""));
		
		getVO.setHost(searchHost);
		getVO.setPort(searchPort);
		getVO.setModel("uflix");
		
		//		로그 기본 셋팅
		LogVO logvo = new LogVO();
		logvo.setREQ_TIME(logService.getNowDate(17)); 	// 사용자 요청 발생시간
		logvo.setSID(userSid); 	// 
		logvo.setONEID_EMAIL(email);
		logvo.setSVC_TYPE("UFX");
		logvo.setSVC_CMD("hotkeyword");
			logvo.setSECTION("N");
		try {
			
			// 검색 요청 변수 유효성 검사
			getVO = UtilManager.checkPopInfo(getVO,"N", "uflix");	 // N : 디코드 안함 ,  Y : 디코드 처리
			logvo.setKEYWORD("");
			if ( getVO.hasErrorResponse() ) {	// 에러 O
				
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode(getVO.getErrorCode());
				suberror.setMessage(getVO.getErrorResponse());
				suberrorList.add(suberror);
				
				if(returnType.equals("text/xml")) {
					OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
					response.setCode(getVO.getErrorCode());
					response.setMessage(getVO.getErrorResponse());
					
					response.setSuberror(suberrorList);
					
					result =  Response.ok(response, MediaType.TEXT_XML).build();
	
				} else if(returnType.equals("application/json")) {
					OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
					Json_Error json_error = new Json_Error();
					json_error.setCode(getVO.getErrorCode());
					json_error.setMessage(getVO.getErrorResponse());
					
					json_error.setSuberror(suberrorList);
					
					response.setJson_Error(json_error);
					result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
				}
				logvo.setRESULT_CODE(getVO.getErrorCode());
				
			}	// 에러 O ------ (END) 
			else {	// 에러 X
				// 검색 수행
				if(returnType.equals("text/xml")) {
					OpenAPIPopWordResponse popWordResponse =  popService.search(getVO);
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponse response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(getVO.getW());
						suberror.setCode(response.getCode());
						suberror.setMessage(response.getMessage());
						suberrorList.add(suberror);

						response.setSuberror(suberrorList);
						
						result =  Response.ok(response, MediaType.TEXT_XML).build();
						logvo.setRESULT_CODE(response.getCode());
					} else {
						if ( popWordResponse.getMeta_storage_list().get(0).getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
//							
//							response.setCode("20001000");
//							response.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(getVO.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							response.setSuberror(suberrorList);
							
							
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result =  Response.ok(popWordResponse, MediaType.TEXT_XML).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				} else if(returnType.equals("application/json")) {
					OpenAPIPopWordResponseJson popWordResponse = popService.searchJson(getVO);
					
					
					if ( popWordResponse.getErrorResponse() != null ) {	// 검색 에러 O
						OpenAPIErrorResponseJson response =  popWordResponse.getErrorResponse();
						
						// suberror 담기
						List suberrorList = new ArrayList<Suberror>();
						Suberror suberror = new Suberror();
						suberror.setName(getVO.getW());
						suberror.setCode(response.getJson_Error().getCode());
						suberror.setMessage(response.getJson_Error().getMessage());
						suberrorList.add(suberror);

						Json_Error error = response.getJson_Error();
						error.setSuberror(suberrorList);
						response.setJson_Error(error);
						
						result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
						logvo.setRESULT_CODE(response.getJson_Error().getCode());
						
						
					} else {
						if ( popWordResponse.getJson_Statis().getTotcnt().equals("0")) {	// 검색 결과 없을때
//							OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
//							
//							Json_Error error = new Json_Error();
//							error.setCode("20001000");
//							error.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							
//							// suberror 담기
//							List suberrorList = new ArrayList<Suberror>();
//							Suberror suberror = new Suberror();
//							suberror.setName(getVO.getW());
//							suberror.setCode("20001000");
//							suberror.setMessage(ERROR_TYPE.CODE_20001000.getErrorMessage());
//							suberrorList.add(suberror);
//
//							
//							error.setSuberror(suberrorList);
//							response.setJson_Error(error);
							
							result =  Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20001000");
						} else {
							result = Response.ok(popWordResponse, MediaType.APPLICATION_JSON).build();
							logvo.setRESULT_CODE("20000000");
						}
					}
					
				}
			}	// 에러 X ------ (END)
			return result;
		} catch (Exception e) {
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION START =+=+=+=+=+=+=+=+=+=+=+=+=+=");
//			logger.error("EXCEPTION 위치 : " + request.getServletPath());
			logger.error("EXCEPTION 내용 : \n" + e.toString());
			logger.error("=+=+=+=+=+=+=+=+=+=+=+=+=+= EXCEPTION END   =+=+=+=+=+=+=+=+=+=+=+=+=+=");
			if(returnType.equals("text/xml")) {
				OpenAPIErrorResponse response =  new OpenAPIErrorResponse();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode("3000");
				
				response.setCode("3000");
				response.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				
				suberrorList.add(suberror);

				response.setSuberror(suberrorList);

				result =  Response.ok(response, MediaType.TEXT_XML).build();

			} else if(returnType.equals("application/json")) {
				OpenAPIErrorResponseJson response =  new OpenAPIErrorResponseJson();
				Json_Error json_error = new Json_Error();
				// suberror 만들기
				List suberrorList = new ArrayList<Suberror>();
				Suberror suberror = new Suberror();
				suberror.setName(getVO.getW());
				suberror.setCode("3000");
				
				json_error.setCode("3000");
				json_error.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				suberror.setMessage(ERROR_TYPE.CODE_40003000.getErrorMessage());
				logvo.setRESULT_CODE("40003000");
				
				suberrorList.add(suberror);

				json_error.setSuberror(suberrorList);

				response.setJson_Error(json_error);
				result =  Response.ok(response, MediaType.APPLICATION_JSON).build();
			}
			return result;
		} finally {
			logger.debug("=========================== DEBUG START ===========================");
//			logger.debug("DEBUG 위치 : " + request.getServletPath());
			logvo = logService.setCommonLog(logvo);
			logvo.setRSP_TIME(logService.getNowDate(17)); 	// 사용자 요청 응답 발생시간
			logService.writeLog(logvo,was_num);
			logger.debug("=========================== DEBUG END   ===========================");
		}
				
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path(videoHangCheckRequestURL)
	public String naviHangCheckProcess(String input, @Context HttpServletRequest request, @Context UriInfo uriInfo) throws InterruptedException {
		input = input.trim();
		
		String result = aliveCheckResponseMessage;
		
		return result;
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path(uflixMobileHangCheckRequestURL)
	public String mobileHangCheckProcess(String input, @Context HttpServletRequest request, @Context UriInfo uriInfo) throws InterruptedException {
		input = input.trim();
		
		String result = aliveCheckResponseMessage;
		
		return result;
	}
	
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	@Path(uflixTvgHangCheckRequestURL)
	public String tvgHangCheckProcess(String input, @Context HttpServletRequest request, @Context UriInfo uriInfo) throws InterruptedException {
		input = input.trim();
		
		String result = aliveCheckResponseMessage;
		
		return result;
	}
	
	/**
	 * wastest
	 * @param input
	 * @param request
	 * @param uriInfo
	 * @return
	 */
	
	@GET
	@Path(searchTestRequestURL)
	public String getAsText() {
		System.out.println("호출");
		try {
//			Thread.sleep(10000000);
			System.out.println("정상호출끝");
			return "호출성공";
			// TODO Auto-generated catch block
		}finally {
			
		}
		
	}
	
	
}